// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1716.robotCode2017fix;

import edu.wpi.cscore.AxisCamera;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1716.robotCode2017fix.commands.*;
import org.usfirst.frc1716.robotCode2017fix.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Preferences prefs;
	
	double driveOffset;
	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static intake intake;
    public static tarpPID tarpPID;
    public static sensors sensors;
    public static DirectionalSubsystem directionalSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final int IMG_WIDTH = 320;
    private static final int IMG_HEIGHT = 240;
    
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        intake = new intake();
        tarpPID = new tarpPID();
        sensors = new sensors();
        directionalSubsystem = new DirectionalSubsystem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        CameraServer cam = CameraServer.getInstance();
       
        
        UsbCamera webCamera = cam.startAutomaticCapture();
        webCamera.setResolution(IMG_WIDTH, IMG_HEIGHT);
        
        webCamera.setFPS(15);
        
        AxisCamera axis = cam.addAxisCamera("10.17.16.77");
        axis.setResolution(IMG_WIDTH, IMG_HEIGHT);    
        
        Robot.sensors.calibrateGyro();
        

        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCG();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
    	
    	SmartDashboard.putNumber("Gyro Value: ", Robot.sensors.getGyro());
    	SmartDashboard.putNumber("Ultrasonic Sensor: ", Robot.sensors.getDist());
    	SmartDashboard.putNumber("Potentiometer: ", Robot.tarpPID.returnPIDInput());
    	
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	
    	prefs = Preferences.getInstance();
    	Robot.driveTrain.setOffset(prefs.getDouble("Drive Offset", 0)); 
    	Robot.driveTrain.setSpeed(prefs.getDouble("Speed", 1));
    	Robot.driveTrain.setDist(prefs.getDouble("Distance", 2048));
    	Robot.driveTrain.setMag(prefs.getDouble("Turn Mag", 45));
    	Robot.driveTrain.setIntake(prefs.getDouble("Intake", 0.55));
    	Robot.tarpPID.setWound(prefs.getDouble("PotWound", 100));
    	Robot.tarpPID.setUnWound(prefs.getDouble("PotUnWound", 35));
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	
    	SmartDashboard.putNumber("Gyro Value: ", Robot.sensors.getGyro());
    	SmartDashboard.putNumber("Ultrasonic Sensor: ", Robot.sensors.getDist());
    	SmartDashboard.putNumber("Potentiometer: ", Robot.tarpPID.returnPIDInput());
    	
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	
    	prefs = Preferences.getInstance();
    	Robot.driveTrain.setOffset(prefs.getDouble("Drive Offset", 0)); 
    	Robot.driveTrain.setSpeed(prefs.getDouble("Speed", 1));
    	Robot.driveTrain.setDist(prefs.getDouble("Distance", 2048));
    	Robot.driveTrain.setMag(prefs.getDouble("Turn Mag", 45));
    	Robot.driveTrain.setIntake(prefs.getDouble("IntakeBase", 0.55));
    	Robot.tarpPID.setWound(prefs.getDouble("PotWound", 100));
    	Robot.tarpPID.setUnWound(prefs.getDouble("PotUnwound", 35));
    	
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	
    	SmartDashboard.putNumber("Gyro Value: ", Robot.sensors.getGyro());
    	SmartDashboard.putNumber("Ultrasonic Sensor: ", Robot.sensors.getDist());
    	SmartDashboard.putNumber("Potentiometer: ", Robot.tarpPID.returnPIDInput());
    	SmartDashboard.putNumber("Intake : ", Robot.driveTrain.getIntake());
    	SmartDashboard.putNumber("Pot Unwound: ", Robot.tarpPID.getUnWound());
    	SmartDashboard.putNumber("Pot Wound: ", Robot.tarpPID.getWound());
    	SmartDashboard.putNumber("Setpoint", Robot.tarpPID.getSetpoint());
    	
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	
    	SmartDashboard.putNumber("Gyro Value: ", Robot.sensors.getGyro());
    	SmartDashboard.putNumber("Ultrasonic Sensor: ", Robot.sensors.getDist());
    	SmartDashboard.putNumber("Potentiometer: ", Robot.tarpPID.returnPIDInput());
    	
        LiveWindow.run();
    }
}
