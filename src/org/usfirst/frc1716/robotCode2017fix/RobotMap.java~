// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1716.robotCode2017fix;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

	// SPECIAL GYRO FOR SPECAIL ROBUTS
	public static ADXRS450_Gyro gyro;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainSpeedController1;
    public static SpeedController driveTrainSpeedController2;
    public static SpeedController driveTrainSpeedController3;
    public static SpeedController driveTrainSpeedController4;
    public static RobotDrive driveTrainRobotDrive41;
    public static SpeedController intakeintakeMotor;
    public static AnalogPotentiometer tarpPIDAnalogPotentiometer1;
    public static SpeedController tarpPIDtarpMotor;
    public static AnalogInput sensorsultraSonic;
    public static Encoder sensorsQuadratureEncoder1;
    public static SpeedController directionalSubsystemLeftFront;
    public static AnalogAccelerometer directionalSubsystemAnalogAccelerometer1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
    	
    	// SPecIal GYrO 4% SpeCIAle PEPlW
    	gyro = new ADXRS450_Gyro();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedController1 = new Talon(0);
        LiveWindow.addActuator("driveTrain", "Speed Controller 1", (Talon) driveTrainSpeedController1);
        
        driveTrainSpeedController2 = new Talon(1);
        LiveWindow.addActuator("driveTrain", "Speed Controller 2", (Talon) driveTrainSpeedController2);
        
        driveTrainSpeedController3 = new Talon(2);
        LiveWindow.addActuator("driveTrain", "Speed Controller 3", (Talon) driveTrainSpeedController3);
        
        driveTrainSpeedController4 = new Talon(3);
        LiveWindow.addActuator("driveTrain", "Speed Controller 4", (Talon) driveTrainSpeedController4);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainSpeedController1, driveTrainSpeedController2,
              driveTrainSpeedController3, driveTrainSpeedController4);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        intakeintakeMotor = new Spark(4);
        LiveWindow.addActuator("intake", "intakeMotor", (Spark) intakeintakeMotor);
        
        tarpPIDAnalogPotentiometer1 = new AnalogPotentiometer(0, 100.0, 0.0);
        LiveWindow.addSensor("tarpPID", "Analog Potentiometer 1", tarpPIDAnalogPotentiometer1);
        
        tarpPIDtarpMotor = new Spark(5);
        LiveWindow.addActuator("tarpPID", "tarpMotor", (Spark) tarpPIDtarpMotor);
        
        sensorsultraSonic = new AnalogInput(1);
        LiveWindow.addSensor("sensors", "ultraSonic", sensorsultraSonic);
        
        sensorsQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("sensors", "Quadrature Encoder 1", sensorsQuadratureEncoder1);
        sensorsQuadratureEncoder1.setDistancePerPulse(1.0);
        sensorsQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
