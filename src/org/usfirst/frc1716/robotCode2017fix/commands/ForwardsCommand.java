// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1716.robotCode2017fix.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1716.robotCode2017fix.Robot;

/**
 *
 */
public class ForwardsCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	//Account for gyro being off (ie -16 is "zero")
	double gyroOffset = 16;
	//Distance to travel in encoder ticks
	double dist;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ForwardsCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    public ForwardsCommand(double distance)
    {
    	dist = distance;
    	requires(Robot.driveTrain);
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	//Reset encoders and gyro
    	Robot.sensors.resetEncoderLeft();
    	gyroOffset = Robot.sensors.getGyro();
    	Robot.sensors.resetGyro();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Set left motor to -0.5 and right motor to the gyro value minus an offset then multiplied by a sensitivity value
    	Robot.driveTrain.drive(-0.5, 0.03 * (Robot.sensors.getGyro() - 16));
    	//Robot.driveTrain.drive(Robot.driveTrain.getSpeed(), Robot.driveTrain.getSpeed());
    	//Delay how often this function runs in order to prevent the robot from "shuffling" forward
    	Timer.delay(0.004);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//Finished when the left encoder value is greater than or equal to the distance
    	SmartDashboard.putNumber("Left Encoder", Robot.sensors.getEncoderLeft());
    	if(Math.abs(Robot.sensors.getEncoderLeft()) >= dist)
    		return true;
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Stop both motors when done
    	Robot.driveTrain.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
